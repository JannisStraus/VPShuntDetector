[build-system]
build-backend = "setuptools.build_meta"

requires = [ "setuptools>=78.0.2", "wheel" ]

[project]
name = "vpshunt-detector"
version = "0.1.1"
description = "Detect VPShunt valves in X-ray images."
readme = "README.md"
license-files = [ "LICENSE" ]
authors = [
  { name = "Jannis Straus", email = "jannis.straus@uk-essen.de" },
]
requires-python = ">=3.10,<4"
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "opencv-python>=4.11.0.86,<4.12",
  "pandas>=2.2.3,<3",
  "requests>=2.32.3,<3",
  "tqdm>=4.67.1,<5",
  "ultralytics>=8.3.69,<8.4",
]

optional-dependencies.dev = [
  "poetry-plugin-export>=1.9,<2",
  "pre-commit>=4.2,<5",
  "pytest>=8.4.1,<9",
]

scripts.vpshuntdetector = "vpshunt_detector.__main__:main"

[tool.setuptools]
packages = { find = { where = [ "." ], include = [ "vpshunt_detector" ] } }

[tool.ruff]
target-version = "py310"

# Same as Black
line-length = 88
lint.select = [
  "B", # flake8-bugbear
  "C", # flake8-comprehensions
  # "D",    # pydocstyle
  "D401", # First line of docstring should be in imperative mood
  "E",    # pycodestyle errors
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "I",    # isort
  "PL",   # pylint
  "RUF",  # ruff
  "W",    # pycodestyle warnings
]
lint.ignore = [
  "D100",    # Missing docstring in public module
  "D101",    # Missing docstring in public class
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic method
  "E501",    # line too long, handled by black
  "PLR2004", # Magic value used in comparison, consider replacing # with a constant variable
]
lint.unfixable = [
  "F401", # Do not fix unused imports, it's annoying during development
]
lint.pydocstyle.convention = "google"

[tool.mypy]
# Ensure full coverage
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true

# Know exactly what you're doing
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
warn_unreachable = true
show_error_codes = true
